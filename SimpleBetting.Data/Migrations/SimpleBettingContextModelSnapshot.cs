// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleBetting.Data;

namespace SimpleBetting.Data.Migrations
{
    [DbContext(typeof(SimpleBettingContext))]
    partial class SimpleBettingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SimpleBetting.Data.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Time = new DateTime(2019, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Time = new DateTime(2019, 2, 11, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Time = new DateTime(2019, 2, 12, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Time = new DateTime(2019, 2, 10, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Time = new DateTime(2019, 2, 9, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Time = new DateTime(2019, 2, 11, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.MatchTicket", b =>
                {
                    b.Property<int>("MatchId");

                    b.Property<int>("TicketId");

                    b.HasKey("MatchId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("MatchTickets");
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AwayWin");

                    b.Property<double?>("Draw");

                    b.Property<double?>("DrawOrAwayWin");

                    b.Property<double?>("HomeOrAwayWin");

                    b.Property<double?>("HomeWin");

                    b.Property<double?>("HomeWinOrDraw");

                    b.Property<bool>("IsTopOffer");

                    b.Property<int>("MatchId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwayWin = 3.0,
                            HomeOrAwayWin = 1.1000000000000001,
                            HomeWin = 1.5,
                            IsTopOffer = false,
                            MatchId = 1
                        },
                        new
                        {
                            Id = 2,
                            AwayWin = 18.300000000000001,
                            HomeOrAwayWin = 4.0999999999999996,
                            HomeWin = 5.5,
                            IsTopOffer = true,
                            MatchId = 1
                        },
                        new
                        {
                            Id = 3,
                            AwayWin = 1.3,
                            HomeOrAwayWin = 1.1000000000000001,
                            HomeWin = 5.5,
                            IsTopOffer = false,
                            MatchId = 2
                        },
                        new
                        {
                            Id = 4,
                            AwayWin = 15.0,
                            Draw = 13.5,
                            DrawOrAwayWin = 7.1500000000000004,
                            HomeWin = 1.4399999999999999,
                            HomeWinOrDraw = 2.1299999999999999,
                            IsTopOffer = false,
                            MatchId = 3
                        },
                        new
                        {
                            Id = 5,
                            AwayWin = 20.0,
                            Draw = 21.5,
                            DrawOrAwayWin = 10.15,
                            HomeWin = 4.4400000000000004,
                            HomeWinOrDraw = 5.1299999999999999,
                            IsTopOffer = true,
                            MatchId = 3
                        },
                        new
                        {
                            Id = 6,
                            AwayWin = 2.2200000000000002,
                            Draw = 7.5,
                            DrawOrAwayWin = 2.1499999999999999,
                            HomeWin = 4.0,
                            HomeWinOrDraw = 3.1299999999999999,
                            IsTopOffer = false,
                            MatchId = 4
                        },
                        new
                        {
                            Id = 7,
                            AwayWin = 1.1000000000000001,
                            Draw = 10.0,
                            HomeWin = 9.8000000000000007,
                            HomeWinOrDraw = 4.9500000000000002,
                            IsTopOffer = false,
                            MatchId = 5
                        },
                        new
                        {
                            Id = 8,
                            AwayWin = 4.0999999999999996,
                            Draw = 13.0,
                            HomeWin = 15.5,
                            HomeWinOrDraw = 8.0999999999999996,
                            IsTopOffer = true,
                            MatchId = 5
                        },
                        new
                        {
                            Id = 9,
                            AwayWin = 1.5,
                            Draw = 7.0,
                            DrawOrAwayWin = 1.24,
                            HomeWin = 3.2999999999999998,
                            HomeWinOrDraw = 2.2400000000000002,
                            IsTopOffer = false,
                            MatchId = 6
                        });
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Volleyball"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Basketball"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Waterpolo"
                        });
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchId");

                    b.Property<string>("Name");

                    b.Property<int>("SportId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("SportId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MatchId = 1,
                            Name = "Mladost Ribola Kaštela",
                            SportId = 1
                        },
                        new
                        {
                            Id = 2,
                            MatchId = 1,
                            Name = "Split",
                            SportId = 1
                        },
                        new
                        {
                            Id = 3,
                            MatchId = 2,
                            Name = "Rovinj",
                            SportId = 1
                        },
                        new
                        {
                            Id = 4,
                            MatchId = 2,
                            Name = "Mladost",
                            SportId = 1
                        },
                        new
                        {
                            Id = 5,
                            MatchId = 3,
                            Name = "Cedevita",
                            SportId = 2
                        },
                        new
                        {
                            Id = 6,
                            MatchId = 3,
                            Name = "Adria Oil Škrljevo",
                            SportId = 2
                        },
                        new
                        {
                            Id = 7,
                            MatchId = 4,
                            Name = "Alkar",
                            SportId = 2
                        },
                        new
                        {
                            Id = 8,
                            MatchId = 4,
                            Name = "Split",
                            SportId = 2
                        },
                        new
                        {
                            Id = 9,
                            MatchId = 5,
                            Name = "Jadran",
                            SportId = 3
                        },
                        new
                        {
                            Id = 10,
                            MatchId = 5,
                            Name = "Jug",
                            SportId = 3
                        },
                        new
                        {
                            Id = 11,
                            MatchId = 6,
                            Name = "POŠK",
                            SportId = 3
                        },
                        new
                        {
                            Id = 12,
                            MatchId = 6,
                            Name = "Mornar",
                            SportId = 3
                        });
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("PossiblePayout");

                    b.Property<double>("Stake");

                    b.Property<double>("TotalOdd");

                    b.Property<int>("TransactionId");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<double>("Balance");

                    b.Property<int?>("TicketId");

                    b.Property<DateTime>("Time");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100.0,
                            Balance = 100.0,
                            Time = new DateTime(2019, 2, 11, 19, 34, 39, 124, DateTimeKind.Local).AddTicks(5249),
                            Type = 0
                        });
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.MatchTicket", b =>
                {
                    b.HasOne("SimpleBetting.Data.Entities.Match", "Match")
                        .WithMany("MatchTickets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleBetting.Data.Entities.Ticket", "Ticket")
                        .WithMany("MatchTickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.Offer", b =>
                {
                    b.HasOne("SimpleBetting.Data.Entities.Match")
                        .WithMany("Offers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleBetting.Data.Entities.Team", b =>
                {
                    b.HasOne("SimpleBetting.Data.Entities.Match")
                        .WithMany("Teams")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleBetting.Data.Entities.Sport")
                        .WithMany("Teams")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
